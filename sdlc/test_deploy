#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

echo -e "${YELLOW}Building project...${NC}"

# Function to handle errors
handle_error() {
    echo -e "${RED}$1${NC}"
    exit 1
}

# Load environment variables from .env if present
if [ -f ".env" ]; then
    export $(grep -v '^#' .env | xargs)
fi

# Ensure DJANGO_PROJECT_NAME, RAILWAY_SERVICE_NAME, and RAILWAY_TOKEN are set
if [ -z "$DJANGO_PROJECT_NAME" ]; then
    handle_error "Error: DJANGO_PROJECT_NAME is not set. Please ensure it's defined in your .env file or as an environment variable."
fi

if [ -z "$DOCKER_USERNAME" ]; then
    handle_error "Error: DOCKER_USERNAME is not set. Please ensure it's defined in your .env file or as an environment variable."
fi

if [ -z "$DOCKER_ACCESS_TOKEN" ]; then
    handle_error "Error: DOCKER_ACCESS_TOKEN is not set. Please ensure it's defined in your .env file or as an environment variable."
fi

if [ -z "$DOCKER_REPO_NAME" ]; then
    handle_error "Error: DOCKER_REPO_NAME is not set. Please ensure it's defined in your .env file or as an environment variable."
fi

# Test Docker login with access token before proceeding
echo -e "${YELLOW}Validating Docker access token...${NC}"
echo "${DOCKER_ACCESS_TOKEN}" | docker login -u ${DOCKER_USERNAME} --password-stdin
if [ $? -ne 0 ]; then
    handle_error "Docker login failed. Please check your DOCKER_ACCESS_TOKEN. Exiting..."
fi

echo -e "${GREEN}Docker login successful! Proceeding with the deployment...${NC}"

# Check if the app directory exists
if [ ! -d "app" ]; then
    handle_error "Error: 'app' directory does not exist. Ensure you are in the correct project directory."
fi

# Check if manage.py exists in the app directory
if [ ! -f "app/manage.py" ]; then
    handle_error "Error: 'manage.py' not found in the 'app' directory. Please check your project structure."
fi

# Check if the Django wsgi module exists
if [ ! -f "app/$DJANGO_PROJECT_NAME/wsgi.py" ]; then
    handle_error "Error: 'wsgi.py' not found in the 'app/$DJANGO_PROJECT_NAME' directory. Please check your project structure."
fi

# Install dependencies
# Check if requirements are already satisfied
echo -e "${YELLOW}Checking if requirements are satisfied...${NC}"
pip freeze > installed_packages.txt
if ! diff -q <(sort requirements.txt) <(sort installed_packages.txt) > /dev/null 2>&1; then
    echo -e "${YELLOW}Requirements not satisfied. Installing dependencies...${NC}"
    pip install -r requirements.txt
    if [ $? -ne 0 ]; then
        handle_error "Failed to install dependencies. Exiting..."
    fi
else
    echo -e "${GREEN}All requirements are already satisfied. Skipping pip install.${NC}"
fi
rm installed_packages.txt

# Collect static files, compile assets, etc...
echo -e "${YELLOW}Building the project...${NC}"
python app/manage.py collectstatic --noinput
if [ $? -ne 0 ]; then
    handle_error "${RED}Build failed while collecting static files. Exiting...${NC}"
fi

# Make migrations
echo -e "${YELLOW}Making migrations...${NC}"
migration_output=$(python app/manage.py makemigrations 2>&1)
if [ $? -ne 0 ]; then
    handle_error "Migrations failed. Exiting..."
fi

# Migrate changes as needed
if echo "$migration_output" | grep -q "No changes detected"; then
    echo -e "${YELLOW}No changes detected in migrations.${NC}"
else
    # Apply migrations
    echo -e "${YELLOW}Applying migrations...${NC}"
    python app/manage.py migrate
    if [ $? -ne 0 ]; then
        handle_error "Migration application failed. Exiting..."
    fi
fi

# Build Docker image
echo -e "${YELLOW}Building Docker image...${NC}"
docker build -t ${DOCKER_USERNAME}/${DOCKER_REPO_NAME}:latest -f Dockerfile .
if [ $? -ne 0 ]; then
    handle_error "Docker image build failed. Exiting..."
fi

# Build Docker image
echo -e "${YELLOW}Building Docker image...${NC}"
docker build -t ${DOCKER_USERNAME}/${DOCKER_REPO_NAME}:latest -f Dockerfile .
if [ $? -ne 0 ]; then
    handle_error "Docker image build failed. Exiting..."
fi

# Push Docker image to Docker Hub using access token
echo -e "${YELLOW}Pushing Docker image to Docker Hub...${NC}"
echo "${DOCKER_ACCESS_TOKEN}" | docker login -u ${DOCKER_USERNAME} --password-stdin
if [ $? -ne 0 ]; then
    handle_error "Docker login failed. Exiting..."
fi
docker push ${DOCKER_USERNAME}/${DOCKER_REPO_NAME}:latest
if [ $? -ne 0 ]; then
    handle_error "Docker image push failed. Exiting..."
fi

echo -e "${GREEN}Docker image successfully pushed to Docker Hub!${NC}"
echo -e "${GREEN}Deployment script completed successfully!${NC}"
